// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dataset_options.proto

#include "dataset_options.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace tensorflow {
namespace data {
constexpr AutotuneOptions::AutotuneOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct AutotuneOptionsDefaultTypeInternal {
  constexpr AutotuneOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AutotuneOptionsDefaultTypeInternal() {}
  union {
    AutotuneOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AutotuneOptionsDefaultTypeInternal _AutotuneOptions_default_instance_;
constexpr CardinalityOptions::CardinalityOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : compute_level_(0)
{}
struct CardinalityOptionsDefaultTypeInternal {
  constexpr CardinalityOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CardinalityOptionsDefaultTypeInternal() {}
  union {
    CardinalityOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CardinalityOptionsDefaultTypeInternal _CardinalityOptions_default_instance_;
constexpr DistributeOptions::DistributeOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : auto_shard_policy_(0)

  , _oneof_case_{}{}
struct DistributeOptionsDefaultTypeInternal {
  constexpr DistributeOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DistributeOptionsDefaultTypeInternal() {}
  union {
    DistributeOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DistributeOptionsDefaultTypeInternal _DistributeOptions_default_instance_;
constexpr OptimizationOptions::OptimizationOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct OptimizationOptionsDefaultTypeInternal {
  constexpr OptimizationOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OptimizationOptionsDefaultTypeInternal() {}
  union {
    OptimizationOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OptimizationOptionsDefaultTypeInternal _OptimizationOptions_default_instance_;
constexpr ThreadingOptions::ThreadingOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ThreadingOptionsDefaultTypeInternal {
  constexpr ThreadingOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ThreadingOptionsDefaultTypeInternal() {}
  union {
    ThreadingOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ThreadingOptionsDefaultTypeInternal _ThreadingOptions_default_instance_;
constexpr Options::Options(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : distribute_options_(nullptr)
  , optimization_options_(nullptr)
  , threading_options_(nullptr)
  , autotune_options_(nullptr)
  , _oneof_case_{}{}
struct OptionsDefaultTypeInternal {
  constexpr OptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OptionsDefaultTypeInternal() {}
  union {
    Options _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OptionsDefaultTypeInternal _Options_default_instance_;
}  // namespace data
}  // namespace tensorflow
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dataset_5foptions_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_dataset_5foptions_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dataset_5foptions_2eproto = nullptr;

const uint32_t TableStruct_dataset_5foptions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::AutotuneOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::AutotuneOptions, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::AutotuneOptions, optional_enabled_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::AutotuneOptions, optional_cpu_budget_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::AutotuneOptions, optional_ram_budget_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::AutotuneOptions, optional_autotune_algorithm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::CardinalityOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::CardinalityOptions, compute_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::DistributeOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::DistributeOptions, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::DistributeOptions, auto_shard_policy_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::DistributeOptions, optional_num_devices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, optional_apply_default_optimizations_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, optional_filter_fusion_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, optional_map_and_batch_fusion_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, optional_map_and_filter_fusion_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, optional_map_fusion_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, optional_map_parallelization_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, optional_noop_elimination_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, optional_parallel_batch_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, optional_shuffle_and_repeat_fusion_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, optional_filter_parallelization_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::OptimizationOptions, optional_inject_prefetch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::ThreadingOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::ThreadingOptions, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::ThreadingOptions, optional_max_intra_op_parallelism_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::ThreadingOptions, optional_private_threadpool_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::Options, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::Options, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::Options, autotune_options_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::Options, distribute_options_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::Options, optimization_options_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::Options, threading_options_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::Options, optional_deterministic_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::Options, optional_slack_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::Options, optional_external_state_policy_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::data::AutotuneOptions)},
  { 14, -1, -1, sizeof(::tensorflow::data::CardinalityOptions)},
  { 21, -1, -1, sizeof(::tensorflow::data::DistributeOptions)},
  { 30, -1, -1, sizeof(::tensorflow::data::OptimizationOptions)},
  { 58, -1, -1, sizeof(::tensorflow::data::ThreadingOptions)},
  { 68, -1, -1, sizeof(::tensorflow::data::Options)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::data::_AutotuneOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::data::_CardinalityOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::data::_DistributeOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::data::_OptimizationOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::data::_ThreadingOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::data::_Options_default_instance_),
};

const char descriptor_table_protodef_dataset_5foptions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025dataset_options.proto\022\017tensorflow.data"
  "\032\013model.proto\"\371\001\n\017AutotuneOptions\022\021\n\007ena"
  "bled\030\001 \001(\010H\000\022\024\n\ncpu_budget\030\002 \001(\005H\001\022\024\n\nra"
  "m_budget\030\003 \001(\003H\002\022F\n\022autotune_algorithm\030\004"
  " \001(\0162(.tensorflow.data.model.AutotuneAlg"
  "orithmH\003B\022\n\020optional_enabledB\025\n\023optional"
  "_cpu_budgetB\025\n\023optional_ram_budgetB\035\n\033op"
  "tional_autotune_algorithm\"\321\001\n\022Cardinalit"
  "yOptions\022G\n\rcompute_level\030\001 \001(\01620.tensor"
  "flow.data.CardinalityOptions.ComputeLeve"
  "l\"r\n\014ComputeLevel\022#\n\037CARDINALITY_COMPUTE"
  "_UNSPECIFIED\020\000\022\033\n\027CARDINALITY_COMPUTE_LO"
  "W\020\001\022 \n\034CARDINALITY_COMPUTE_MODERATE\020\002\"\177\n"
  "\021DistributeOptions\022;\n\021auto_shard_policy\030"
  "\001 \001(\0162 .tensorflow.data.AutoShardPolicy\022"
  "\025\n\013num_devices\030\002 \001(\005H\000B\026\n\024optional_num_d"
  "evices\"\354\005\n\023OptimizationOptions\022%\n\033apply_"
  "default_optimizations\030\001 \001(\010H\000\022\027\n\rfilter_"
  "fusion\030\006 \001(\010H\001\022\036\n\024map_and_batch_fusion\030\t"
  " \001(\010H\002\022\037\n\025map_and_filter_fusion\030\n \001(\010H\003\022"
  "\024\n\nmap_fusion\030\013 \001(\010H\004\022\035\n\023map_paralleliza"
  "tion\030\014 \001(\010H\005\022\032\n\020noop_elimination\030\016 \001(\010H\006"
  "\022\030\n\016parallel_batch\030\017 \001(\010H\007\022#\n\031shuffle_an"
  "d_repeat_fusion\030\021 \001(\010H\010\022 \n\026filter_parall"
  "elization\030\022 \001(\010H\t\022\031\n\017inject_prefetch\030\023 \001"
  "(\010H\nB&\n$optional_apply_default_optimizat"
  "ionsB\030\n\026optional_filter_fusionB\037\n\035option"
  "al_map_and_batch_fusionB \n\036optional_map_"
  "and_filter_fusionB\025\n\023optional_map_fusion"
  "B\036\n\034optional_map_parallelizationB\033\n\031opti"
  "onal_noop_eliminationB\031\n\027optional_parall"
  "el_batchB$\n\"optional_shuffle_and_repeat_"
  "fusionB!\n\037optional_filter_parallelizatio"
  "nB\032\n\030optional_inject_prefetchJ\004\010\002\020\003J\004\010\003\020"
  "\004J\004\010\004\020\005J\004\010\005\020\006J\004\010\007\020\010J\004\010\010\020\tJ\004\010\r\020\016J\004\010\020\020\021\"\242\001"
  "\n\020ThreadingOptions\022\"\n\030max_intra_op_paral"
  "lelism\030\001 \001(\005H\000\022!\n\027private_threadpool_siz"
  "e\030\002 \001(\005H\001B#\n!optional_max_intra_op_paral"
  "lelismB\"\n optional_private_threadpool_si"
  "ze\"\306\003\n\007Options\022\027\n\rdeterministic\030\001 \001(\010H\000\022"
  ":\n\020autotune_options\030\007 \001(\0132 .tensorflow.d"
  "ata.AutotuneOptions\022>\n\022distribute_option"
  "s\030\002 \001(\0132\".tensorflow.data.DistributeOpti"
  "ons\022B\n\024optimization_options\030\003 \001(\0132$.tens"
  "orflow.data.OptimizationOptions\022\017\n\005slack"
  "\030\004 \001(\010H\001\022<\n\021threading_options\030\005 \001(\0132!.te"
  "nsorflow.data.ThreadingOptions\022E\n\025extern"
  "al_state_policy\030\006 \001(\0162$.tensorflow.data."
  "ExternalStatePolicyH\002B\030\n\026optional_determ"
  "inisticB\020\n\016optional_slackB \n\036optional_ex"
  "ternal_state_policy*K\n\017AutoShardPolicy\022\010"
  "\n\004AUTO\020\000\022\010\n\004FILE\020\001\022\010\n\004DATA\020\002\022\010\n\004HINT\020\003\022\020"
  "\n\003OFF\020\377\377\377\377\377\377\377\377\377\001*J\n\023ExternalStatePolicy\022"
  "\017\n\013POLICY_WARN\020\000\022\021\n\rPOLICY_IGNORE\020\001\022\017\n\013P"
  "OLICY_FAIL\020\002BXZVgithub.com/tensorflow/te"
  "nsorflow/tensorflow/go/core/framework/da"
  "taset_options_go_protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dataset_5foptions_2eproto_deps[1] = {
  &::descriptor_table_model_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dataset_5foptions_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dataset_5foptions_2eproto = {
  false, false, 2270, descriptor_table_protodef_dataset_5foptions_2eproto, "dataset_options.proto", 
  &descriptor_table_dataset_5foptions_2eproto_once, descriptor_table_dataset_5foptions_2eproto_deps, 1, 6,
  schemas, file_default_instances, TableStruct_dataset_5foptions_2eproto::offsets,
  file_level_metadata_dataset_5foptions_2eproto, file_level_enum_descriptors_dataset_5foptions_2eproto, file_level_service_descriptors_dataset_5foptions_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_dataset_5foptions_2eproto_getter() {
  return &descriptor_table_dataset_5foptions_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dataset_5foptions_2eproto(&descriptor_table_dataset_5foptions_2eproto);
namespace tensorflow {
namespace data {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CardinalityOptions_ComputeLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dataset_5foptions_2eproto);
  return file_level_enum_descriptors_dataset_5foptions_2eproto[0];
}
bool CardinalityOptions_ComputeLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CardinalityOptions_ComputeLevel CardinalityOptions::CARDINALITY_COMPUTE_UNSPECIFIED;
constexpr CardinalityOptions_ComputeLevel CardinalityOptions::CARDINALITY_COMPUTE_LOW;
constexpr CardinalityOptions_ComputeLevel CardinalityOptions::CARDINALITY_COMPUTE_MODERATE;
constexpr CardinalityOptions_ComputeLevel CardinalityOptions::ComputeLevel_MIN;
constexpr CardinalityOptions_ComputeLevel CardinalityOptions::ComputeLevel_MAX;
constexpr int CardinalityOptions::ComputeLevel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AutoShardPolicy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dataset_5foptions_2eproto);
  return file_level_enum_descriptors_dataset_5foptions_2eproto[1];
}
bool AutoShardPolicy_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExternalStatePolicy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dataset_5foptions_2eproto);
  return file_level_enum_descriptors_dataset_5foptions_2eproto[2];
}
bool ExternalStatePolicy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class AutotuneOptions::_Internal {
 public:
};

AutotuneOptions::AutotuneOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tensorflow.data.AutotuneOptions)
}
AutotuneOptions::AutotuneOptions(const AutotuneOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_optional_enabled();
  switch (from.optional_enabled_case()) {
    case kEnabled: {
      _internal_set_enabled(from._internal_enabled());
      break;
    }
    case OPTIONAL_ENABLED_NOT_SET: {
      break;
    }
  }
  clear_has_optional_cpu_budget();
  switch (from.optional_cpu_budget_case()) {
    case kCpuBudget: {
      _internal_set_cpu_budget(from._internal_cpu_budget());
      break;
    }
    case OPTIONAL_CPU_BUDGET_NOT_SET: {
      break;
    }
  }
  clear_has_optional_ram_budget();
  switch (from.optional_ram_budget_case()) {
    case kRamBudget: {
      _internal_set_ram_budget(from._internal_ram_budget());
      break;
    }
    case OPTIONAL_RAM_BUDGET_NOT_SET: {
      break;
    }
  }
  clear_has_optional_autotune_algorithm();
  switch (from.optional_autotune_algorithm_case()) {
    case kAutotuneAlgorithm: {
      _internal_set_autotune_algorithm(from._internal_autotune_algorithm());
      break;
    }
    case OPTIONAL_AUTOTUNE_ALGORITHM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.AutotuneOptions)
}

inline void AutotuneOptions::SharedCtor() {
clear_has_optional_enabled();
clear_has_optional_cpu_budget();
clear_has_optional_ram_budget();
clear_has_optional_autotune_algorithm();
}

AutotuneOptions::~AutotuneOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.data.AutotuneOptions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AutotuneOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_optional_enabled()) {
    clear_optional_enabled();
  }
  if (has_optional_cpu_budget()) {
    clear_optional_cpu_budget();
  }
  if (has_optional_ram_budget()) {
    clear_optional_ram_budget();
  }
  if (has_optional_autotune_algorithm()) {
    clear_optional_autotune_algorithm();
  }
}

void AutotuneOptions::ArenaDtor(void* object) {
  AutotuneOptions* _this = reinterpret_cast< AutotuneOptions* >(object);
  (void)_this;
}
void AutotuneOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutotuneOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutotuneOptions::clear_optional_enabled() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.AutotuneOptions)
  switch (optional_enabled_case()) {
    case kEnabled: {
      // No need to clear
      break;
    }
    case OPTIONAL_ENABLED_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTIONAL_ENABLED_NOT_SET;
}

void AutotuneOptions::clear_optional_cpu_budget() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.AutotuneOptions)
  switch (optional_cpu_budget_case()) {
    case kCpuBudget: {
      // No need to clear
      break;
    }
    case OPTIONAL_CPU_BUDGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = OPTIONAL_CPU_BUDGET_NOT_SET;
}

void AutotuneOptions::clear_optional_ram_budget() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.AutotuneOptions)
  switch (optional_ram_budget_case()) {
    case kRamBudget: {
      // No need to clear
      break;
    }
    case OPTIONAL_RAM_BUDGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = OPTIONAL_RAM_BUDGET_NOT_SET;
}

void AutotuneOptions::clear_optional_autotune_algorithm() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.AutotuneOptions)
  switch (optional_autotune_algorithm_case()) {
    case kAutotuneAlgorithm: {
      // No need to clear
      break;
    }
    case OPTIONAL_AUTOTUNE_ALGORITHM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[3] = OPTIONAL_AUTOTUNE_ALGORITHM_NOT_SET;
}


void AutotuneOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.AutotuneOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_optional_enabled();
  clear_optional_cpu_budget();
  clear_optional_ram_budget();
  clear_optional_autotune_algorithm();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutotuneOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_enabled(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cpu_budget = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_cpu_budget(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ram_budget = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_ram_budget(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.data.model.AutotuneAlgorithm autotune_algorithm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_autotune_algorithm(static_cast<::tensorflow::data::model::AutotuneAlgorithm>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutotuneOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.AutotuneOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (_internal_has_enabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // int32 cpu_budget = 2;
  if (_internal_has_cpu_budget()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cpu_budget(), target);
  }

  // int64 ram_budget = 3;
  if (_internal_has_ram_budget()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_ram_budget(), target);
  }

  // .tensorflow.data.model.AutotuneAlgorithm autotune_algorithm = 4;
  if (_internal_has_autotune_algorithm()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_autotune_algorithm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.AutotuneOptions)
  return target;
}

size_t AutotuneOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.AutotuneOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (optional_enabled_case()) {
    // bool enabled = 1;
    case kEnabled: {
      total_size += 1 + 1;
      break;
    }
    case OPTIONAL_ENABLED_NOT_SET: {
      break;
    }
  }
  switch (optional_cpu_budget_case()) {
    // int32 cpu_budget = 2;
    case kCpuBudget: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_cpu_budget());
      break;
    }
    case OPTIONAL_CPU_BUDGET_NOT_SET: {
      break;
    }
  }
  switch (optional_ram_budget_case()) {
    // int64 ram_budget = 3;
    case kRamBudget: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_ram_budget());
      break;
    }
    case OPTIONAL_RAM_BUDGET_NOT_SET: {
      break;
    }
  }
  switch (optional_autotune_algorithm_case()) {
    // .tensorflow.data.model.AutotuneAlgorithm autotune_algorithm = 4;
    case kAutotuneAlgorithm: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_autotune_algorithm());
      break;
    }
    case OPTIONAL_AUTOTUNE_ALGORITHM_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AutotuneOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AutotuneOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AutotuneOptions::GetClassData() const { return &_class_data_; }

void AutotuneOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AutotuneOptions *>(to)->MergeFrom(
      static_cast<const AutotuneOptions &>(from));
}


void AutotuneOptions::MergeFrom(const AutotuneOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.AutotuneOptions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.optional_enabled_case()) {
    case kEnabled: {
      _internal_set_enabled(from._internal_enabled());
      break;
    }
    case OPTIONAL_ENABLED_NOT_SET: {
      break;
    }
  }
  switch (from.optional_cpu_budget_case()) {
    case kCpuBudget: {
      _internal_set_cpu_budget(from._internal_cpu_budget());
      break;
    }
    case OPTIONAL_CPU_BUDGET_NOT_SET: {
      break;
    }
  }
  switch (from.optional_ram_budget_case()) {
    case kRamBudget: {
      _internal_set_ram_budget(from._internal_ram_budget());
      break;
    }
    case OPTIONAL_RAM_BUDGET_NOT_SET: {
      break;
    }
  }
  switch (from.optional_autotune_algorithm_case()) {
    case kAutotuneAlgorithm: {
      _internal_set_autotune_algorithm(from._internal_autotune_algorithm());
      break;
    }
    case OPTIONAL_AUTOTUNE_ALGORITHM_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AutotuneOptions::CopyFrom(const AutotuneOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.AutotuneOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutotuneOptions::IsInitialized() const {
  return true;
}

void AutotuneOptions::InternalSwap(AutotuneOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(optional_enabled_, other->optional_enabled_);
  swap(optional_cpu_budget_, other->optional_cpu_budget_);
  swap(optional_ram_budget_, other->optional_ram_budget_);
  swap(optional_autotune_algorithm_, other->optional_autotune_algorithm_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
  swap(_oneof_case_[3], other->_oneof_case_[3]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AutotuneOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dataset_5foptions_2eproto_getter, &descriptor_table_dataset_5foptions_2eproto_once,
      file_level_metadata_dataset_5foptions_2eproto[0]);
}

// ===================================================================

class CardinalityOptions::_Internal {
 public:
};

CardinalityOptions::CardinalityOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tensorflow.data.CardinalityOptions)
}
CardinalityOptions::CardinalityOptions(const CardinalityOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  compute_level_ = from.compute_level_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.CardinalityOptions)
}

inline void CardinalityOptions::SharedCtor() {
compute_level_ = 0;
}

CardinalityOptions::~CardinalityOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.data.CardinalityOptions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CardinalityOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CardinalityOptions::ArenaDtor(void* object) {
  CardinalityOptions* _this = reinterpret_cast< CardinalityOptions* >(object);
  (void)_this;
}
void CardinalityOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CardinalityOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CardinalityOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.CardinalityOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  compute_level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CardinalityOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.data.CardinalityOptions.ComputeLevel compute_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_compute_level(static_cast<::tensorflow::data::CardinalityOptions_ComputeLevel>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CardinalityOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.CardinalityOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.data.CardinalityOptions.ComputeLevel compute_level = 1;
  if (this->_internal_compute_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_compute_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.CardinalityOptions)
  return target;
}

size_t CardinalityOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.CardinalityOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.data.CardinalityOptions.ComputeLevel compute_level = 1;
  if (this->_internal_compute_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_compute_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CardinalityOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CardinalityOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CardinalityOptions::GetClassData() const { return &_class_data_; }

void CardinalityOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CardinalityOptions *>(to)->MergeFrom(
      static_cast<const CardinalityOptions &>(from));
}


void CardinalityOptions::MergeFrom(const CardinalityOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.CardinalityOptions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_compute_level() != 0) {
    _internal_set_compute_level(from._internal_compute_level());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CardinalityOptions::CopyFrom(const CardinalityOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.CardinalityOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardinalityOptions::IsInitialized() const {
  return true;
}

void CardinalityOptions::InternalSwap(CardinalityOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(compute_level_, other->compute_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CardinalityOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dataset_5foptions_2eproto_getter, &descriptor_table_dataset_5foptions_2eproto_once,
      file_level_metadata_dataset_5foptions_2eproto[1]);
}

// ===================================================================

class DistributeOptions::_Internal {
 public:
};

DistributeOptions::DistributeOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tensorflow.data.DistributeOptions)
}
DistributeOptions::DistributeOptions(const DistributeOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  auto_shard_policy_ = from.auto_shard_policy_;
  clear_has_optional_num_devices();
  switch (from.optional_num_devices_case()) {
    case kNumDevices: {
      _internal_set_num_devices(from._internal_num_devices());
      break;
    }
    case OPTIONAL_NUM_DEVICES_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.DistributeOptions)
}

inline void DistributeOptions::SharedCtor() {
auto_shard_policy_ = 0;
clear_has_optional_num_devices();
}

DistributeOptions::~DistributeOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.data.DistributeOptions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DistributeOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_optional_num_devices()) {
    clear_optional_num_devices();
  }
}

void DistributeOptions::ArenaDtor(void* object) {
  DistributeOptions* _this = reinterpret_cast< DistributeOptions* >(object);
  (void)_this;
}
void DistributeOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DistributeOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DistributeOptions::clear_optional_num_devices() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.DistributeOptions)
  switch (optional_num_devices_case()) {
    case kNumDevices: {
      // No need to clear
      break;
    }
    case OPTIONAL_NUM_DEVICES_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTIONAL_NUM_DEVICES_NOT_SET;
}


void DistributeOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.DistributeOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auto_shard_policy_ = 0;
  clear_optional_num_devices();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DistributeOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.data.AutoShardPolicy auto_shard_policy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_auto_shard_policy(static_cast<::tensorflow::data::AutoShardPolicy>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 num_devices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_num_devices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DistributeOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.DistributeOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.data.AutoShardPolicy auto_shard_policy = 1;
  if (this->_internal_auto_shard_policy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_auto_shard_policy(), target);
  }

  // int32 num_devices = 2;
  if (_internal_has_num_devices()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num_devices(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.DistributeOptions)
  return target;
}

size_t DistributeOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.DistributeOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.data.AutoShardPolicy auto_shard_policy = 1;
  if (this->_internal_auto_shard_policy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_auto_shard_policy());
  }

  switch (optional_num_devices_case()) {
    // int32 num_devices = 2;
    case kNumDevices: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_num_devices());
      break;
    }
    case OPTIONAL_NUM_DEVICES_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DistributeOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DistributeOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DistributeOptions::GetClassData() const { return &_class_data_; }

void DistributeOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DistributeOptions *>(to)->MergeFrom(
      static_cast<const DistributeOptions &>(from));
}


void DistributeOptions::MergeFrom(const DistributeOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.DistributeOptions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_auto_shard_policy() != 0) {
    _internal_set_auto_shard_policy(from._internal_auto_shard_policy());
  }
  switch (from.optional_num_devices_case()) {
    case kNumDevices: {
      _internal_set_num_devices(from._internal_num_devices());
      break;
    }
    case OPTIONAL_NUM_DEVICES_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DistributeOptions::CopyFrom(const DistributeOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.DistributeOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistributeOptions::IsInitialized() const {
  return true;
}

void DistributeOptions::InternalSwap(DistributeOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(auto_shard_policy_, other->auto_shard_policy_);
  swap(optional_num_devices_, other->optional_num_devices_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DistributeOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dataset_5foptions_2eproto_getter, &descriptor_table_dataset_5foptions_2eproto_once,
      file_level_metadata_dataset_5foptions_2eproto[2]);
}

// ===================================================================

class OptimizationOptions::_Internal {
 public:
};

OptimizationOptions::OptimizationOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tensorflow.data.OptimizationOptions)
}
OptimizationOptions::OptimizationOptions(const OptimizationOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_optional_apply_default_optimizations();
  switch (from.optional_apply_default_optimizations_case()) {
    case kApplyDefaultOptimizations: {
      _internal_set_apply_default_optimizations(from._internal_apply_default_optimizations());
      break;
    }
    case OPTIONAL_APPLY_DEFAULT_OPTIMIZATIONS_NOT_SET: {
      break;
    }
  }
  clear_has_optional_filter_fusion();
  switch (from.optional_filter_fusion_case()) {
    case kFilterFusion: {
      _internal_set_filter_fusion(from._internal_filter_fusion());
      break;
    }
    case OPTIONAL_FILTER_FUSION_NOT_SET: {
      break;
    }
  }
  clear_has_optional_map_and_batch_fusion();
  switch (from.optional_map_and_batch_fusion_case()) {
    case kMapAndBatchFusion: {
      _internal_set_map_and_batch_fusion(from._internal_map_and_batch_fusion());
      break;
    }
    case OPTIONAL_MAP_AND_BATCH_FUSION_NOT_SET: {
      break;
    }
  }
  clear_has_optional_map_and_filter_fusion();
  switch (from.optional_map_and_filter_fusion_case()) {
    case kMapAndFilterFusion: {
      _internal_set_map_and_filter_fusion(from._internal_map_and_filter_fusion());
      break;
    }
    case OPTIONAL_MAP_AND_FILTER_FUSION_NOT_SET: {
      break;
    }
  }
  clear_has_optional_map_fusion();
  switch (from.optional_map_fusion_case()) {
    case kMapFusion: {
      _internal_set_map_fusion(from._internal_map_fusion());
      break;
    }
    case OPTIONAL_MAP_FUSION_NOT_SET: {
      break;
    }
  }
  clear_has_optional_map_parallelization();
  switch (from.optional_map_parallelization_case()) {
    case kMapParallelization: {
      _internal_set_map_parallelization(from._internal_map_parallelization());
      break;
    }
    case OPTIONAL_MAP_PARALLELIZATION_NOT_SET: {
      break;
    }
  }
  clear_has_optional_noop_elimination();
  switch (from.optional_noop_elimination_case()) {
    case kNoopElimination: {
      _internal_set_noop_elimination(from._internal_noop_elimination());
      break;
    }
    case OPTIONAL_NOOP_ELIMINATION_NOT_SET: {
      break;
    }
  }
  clear_has_optional_parallel_batch();
  switch (from.optional_parallel_batch_case()) {
    case kParallelBatch: {
      _internal_set_parallel_batch(from._internal_parallel_batch());
      break;
    }
    case OPTIONAL_PARALLEL_BATCH_NOT_SET: {
      break;
    }
  }
  clear_has_optional_shuffle_and_repeat_fusion();
  switch (from.optional_shuffle_and_repeat_fusion_case()) {
    case kShuffleAndRepeatFusion: {
      _internal_set_shuffle_and_repeat_fusion(from._internal_shuffle_and_repeat_fusion());
      break;
    }
    case OPTIONAL_SHUFFLE_AND_REPEAT_FUSION_NOT_SET: {
      break;
    }
  }
  clear_has_optional_filter_parallelization();
  switch (from.optional_filter_parallelization_case()) {
    case kFilterParallelization: {
      _internal_set_filter_parallelization(from._internal_filter_parallelization());
      break;
    }
    case OPTIONAL_FILTER_PARALLELIZATION_NOT_SET: {
      break;
    }
  }
  clear_has_optional_inject_prefetch();
  switch (from.optional_inject_prefetch_case()) {
    case kInjectPrefetch: {
      _internal_set_inject_prefetch(from._internal_inject_prefetch());
      break;
    }
    case OPTIONAL_INJECT_PREFETCH_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.OptimizationOptions)
}

inline void OptimizationOptions::SharedCtor() {
clear_has_optional_apply_default_optimizations();
clear_has_optional_filter_fusion();
clear_has_optional_map_and_batch_fusion();
clear_has_optional_map_and_filter_fusion();
clear_has_optional_map_fusion();
clear_has_optional_map_parallelization();
clear_has_optional_noop_elimination();
clear_has_optional_parallel_batch();
clear_has_optional_shuffle_and_repeat_fusion();
clear_has_optional_filter_parallelization();
clear_has_optional_inject_prefetch();
}

OptimizationOptions::~OptimizationOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.data.OptimizationOptions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OptimizationOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_optional_apply_default_optimizations()) {
    clear_optional_apply_default_optimizations();
  }
  if (has_optional_filter_fusion()) {
    clear_optional_filter_fusion();
  }
  if (has_optional_map_and_batch_fusion()) {
    clear_optional_map_and_batch_fusion();
  }
  if (has_optional_map_and_filter_fusion()) {
    clear_optional_map_and_filter_fusion();
  }
  if (has_optional_map_fusion()) {
    clear_optional_map_fusion();
  }
  if (has_optional_map_parallelization()) {
    clear_optional_map_parallelization();
  }
  if (has_optional_noop_elimination()) {
    clear_optional_noop_elimination();
  }
  if (has_optional_parallel_batch()) {
    clear_optional_parallel_batch();
  }
  if (has_optional_shuffle_and_repeat_fusion()) {
    clear_optional_shuffle_and_repeat_fusion();
  }
  if (has_optional_filter_parallelization()) {
    clear_optional_filter_parallelization();
  }
  if (has_optional_inject_prefetch()) {
    clear_optional_inject_prefetch();
  }
}

void OptimizationOptions::ArenaDtor(void* object) {
  OptimizationOptions* _this = reinterpret_cast< OptimizationOptions* >(object);
  (void)_this;
}
void OptimizationOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OptimizationOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OptimizationOptions::clear_optional_apply_default_optimizations() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.OptimizationOptions)
  switch (optional_apply_default_optimizations_case()) {
    case kApplyDefaultOptimizations: {
      // No need to clear
      break;
    }
    case OPTIONAL_APPLY_DEFAULT_OPTIMIZATIONS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTIONAL_APPLY_DEFAULT_OPTIMIZATIONS_NOT_SET;
}

void OptimizationOptions::clear_optional_filter_fusion() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.OptimizationOptions)
  switch (optional_filter_fusion_case()) {
    case kFilterFusion: {
      // No need to clear
      break;
    }
    case OPTIONAL_FILTER_FUSION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = OPTIONAL_FILTER_FUSION_NOT_SET;
}

void OptimizationOptions::clear_optional_map_and_batch_fusion() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.OptimizationOptions)
  switch (optional_map_and_batch_fusion_case()) {
    case kMapAndBatchFusion: {
      // No need to clear
      break;
    }
    case OPTIONAL_MAP_AND_BATCH_FUSION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = OPTIONAL_MAP_AND_BATCH_FUSION_NOT_SET;
}

void OptimizationOptions::clear_optional_map_and_filter_fusion() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.OptimizationOptions)
  switch (optional_map_and_filter_fusion_case()) {
    case kMapAndFilterFusion: {
      // No need to clear
      break;
    }
    case OPTIONAL_MAP_AND_FILTER_FUSION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[3] = OPTIONAL_MAP_AND_FILTER_FUSION_NOT_SET;
}

void OptimizationOptions::clear_optional_map_fusion() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.OptimizationOptions)
  switch (optional_map_fusion_case()) {
    case kMapFusion: {
      // No need to clear
      break;
    }
    case OPTIONAL_MAP_FUSION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[4] = OPTIONAL_MAP_FUSION_NOT_SET;
}

void OptimizationOptions::clear_optional_map_parallelization() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.OptimizationOptions)
  switch (optional_map_parallelization_case()) {
    case kMapParallelization: {
      // No need to clear
      break;
    }
    case OPTIONAL_MAP_PARALLELIZATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[5] = OPTIONAL_MAP_PARALLELIZATION_NOT_SET;
}

void OptimizationOptions::clear_optional_noop_elimination() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.OptimizationOptions)
  switch (optional_noop_elimination_case()) {
    case kNoopElimination: {
      // No need to clear
      break;
    }
    case OPTIONAL_NOOP_ELIMINATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[6] = OPTIONAL_NOOP_ELIMINATION_NOT_SET;
}

void OptimizationOptions::clear_optional_parallel_batch() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.OptimizationOptions)
  switch (optional_parallel_batch_case()) {
    case kParallelBatch: {
      // No need to clear
      break;
    }
    case OPTIONAL_PARALLEL_BATCH_NOT_SET: {
      break;
    }
  }
  _oneof_case_[7] = OPTIONAL_PARALLEL_BATCH_NOT_SET;
}

void OptimizationOptions::clear_optional_shuffle_and_repeat_fusion() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.OptimizationOptions)
  switch (optional_shuffle_and_repeat_fusion_case()) {
    case kShuffleAndRepeatFusion: {
      // No need to clear
      break;
    }
    case OPTIONAL_SHUFFLE_AND_REPEAT_FUSION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[8] = OPTIONAL_SHUFFLE_AND_REPEAT_FUSION_NOT_SET;
}

void OptimizationOptions::clear_optional_filter_parallelization() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.OptimizationOptions)
  switch (optional_filter_parallelization_case()) {
    case kFilterParallelization: {
      // No need to clear
      break;
    }
    case OPTIONAL_FILTER_PARALLELIZATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[9] = OPTIONAL_FILTER_PARALLELIZATION_NOT_SET;
}

void OptimizationOptions::clear_optional_inject_prefetch() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.OptimizationOptions)
  switch (optional_inject_prefetch_case()) {
    case kInjectPrefetch: {
      // No need to clear
      break;
    }
    case OPTIONAL_INJECT_PREFETCH_NOT_SET: {
      break;
    }
  }
  _oneof_case_[10] = OPTIONAL_INJECT_PREFETCH_NOT_SET;
}


void OptimizationOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.OptimizationOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_optional_apply_default_optimizations();
  clear_optional_filter_fusion();
  clear_optional_map_and_batch_fusion();
  clear_optional_map_and_filter_fusion();
  clear_optional_map_fusion();
  clear_optional_map_parallelization();
  clear_optional_noop_elimination();
  clear_optional_parallel_batch();
  clear_optional_shuffle_and_repeat_fusion();
  clear_optional_filter_parallelization();
  clear_optional_inject_prefetch();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OptimizationOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool apply_default_optimizations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_apply_default_optimizations(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool filter_fusion = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _internal_set_filter_fusion(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool map_and_batch_fusion = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _internal_set_map_and_batch_fusion(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool map_and_filter_fusion = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _internal_set_map_and_filter_fusion(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool map_fusion = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _internal_set_map_fusion(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool map_parallelization = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _internal_set_map_parallelization(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool noop_elimination = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _internal_set_noop_elimination(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool parallel_batch = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _internal_set_parallel_batch(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool shuffle_and_repeat_fusion = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _internal_set_shuffle_and_repeat_fusion(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool filter_parallelization = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _internal_set_filter_parallelization(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool inject_prefetch = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _internal_set_inject_prefetch(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OptimizationOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.OptimizationOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool apply_default_optimizations = 1;
  if (_internal_has_apply_default_optimizations()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_apply_default_optimizations(), target);
  }

  // bool filter_fusion = 6;
  if (_internal_has_filter_fusion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_filter_fusion(), target);
  }

  // bool map_and_batch_fusion = 9;
  if (_internal_has_map_and_batch_fusion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_map_and_batch_fusion(), target);
  }

  // bool map_and_filter_fusion = 10;
  if (_internal_has_map_and_filter_fusion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_map_and_filter_fusion(), target);
  }

  // bool map_fusion = 11;
  if (_internal_has_map_fusion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_map_fusion(), target);
  }

  // bool map_parallelization = 12;
  if (_internal_has_map_parallelization()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_map_parallelization(), target);
  }

  // bool noop_elimination = 14;
  if (_internal_has_noop_elimination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_noop_elimination(), target);
  }

  // bool parallel_batch = 15;
  if (_internal_has_parallel_batch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_parallel_batch(), target);
  }

  // bool shuffle_and_repeat_fusion = 17;
  if (_internal_has_shuffle_and_repeat_fusion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_shuffle_and_repeat_fusion(), target);
  }

  // bool filter_parallelization = 18;
  if (_internal_has_filter_parallelization()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_filter_parallelization(), target);
  }

  // bool inject_prefetch = 19;
  if (_internal_has_inject_prefetch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_inject_prefetch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.OptimizationOptions)
  return target;
}

size_t OptimizationOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.OptimizationOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (optional_apply_default_optimizations_case()) {
    // bool apply_default_optimizations = 1;
    case kApplyDefaultOptimizations: {
      total_size += 1 + 1;
      break;
    }
    case OPTIONAL_APPLY_DEFAULT_OPTIMIZATIONS_NOT_SET: {
      break;
    }
  }
  switch (optional_filter_fusion_case()) {
    // bool filter_fusion = 6;
    case kFilterFusion: {
      total_size += 1 + 1;
      break;
    }
    case OPTIONAL_FILTER_FUSION_NOT_SET: {
      break;
    }
  }
  switch (optional_map_and_batch_fusion_case()) {
    // bool map_and_batch_fusion = 9;
    case kMapAndBatchFusion: {
      total_size += 1 + 1;
      break;
    }
    case OPTIONAL_MAP_AND_BATCH_FUSION_NOT_SET: {
      break;
    }
  }
  switch (optional_map_and_filter_fusion_case()) {
    // bool map_and_filter_fusion = 10;
    case kMapAndFilterFusion: {
      total_size += 1 + 1;
      break;
    }
    case OPTIONAL_MAP_AND_FILTER_FUSION_NOT_SET: {
      break;
    }
  }
  switch (optional_map_fusion_case()) {
    // bool map_fusion = 11;
    case kMapFusion: {
      total_size += 1 + 1;
      break;
    }
    case OPTIONAL_MAP_FUSION_NOT_SET: {
      break;
    }
  }
  switch (optional_map_parallelization_case()) {
    // bool map_parallelization = 12;
    case kMapParallelization: {
      total_size += 1 + 1;
      break;
    }
    case OPTIONAL_MAP_PARALLELIZATION_NOT_SET: {
      break;
    }
  }
  switch (optional_noop_elimination_case()) {
    // bool noop_elimination = 14;
    case kNoopElimination: {
      total_size += 1 + 1;
      break;
    }
    case OPTIONAL_NOOP_ELIMINATION_NOT_SET: {
      break;
    }
  }
  switch (optional_parallel_batch_case()) {
    // bool parallel_batch = 15;
    case kParallelBatch: {
      total_size += 1 + 1;
      break;
    }
    case OPTIONAL_PARALLEL_BATCH_NOT_SET: {
      break;
    }
  }
  switch (optional_shuffle_and_repeat_fusion_case()) {
    // bool shuffle_and_repeat_fusion = 17;
    case kShuffleAndRepeatFusion: {
      total_size += 2 + 1;
      break;
    }
    case OPTIONAL_SHUFFLE_AND_REPEAT_FUSION_NOT_SET: {
      break;
    }
  }
  switch (optional_filter_parallelization_case()) {
    // bool filter_parallelization = 18;
    case kFilterParallelization: {
      total_size += 2 + 1;
      break;
    }
    case OPTIONAL_FILTER_PARALLELIZATION_NOT_SET: {
      break;
    }
  }
  switch (optional_inject_prefetch_case()) {
    // bool inject_prefetch = 19;
    case kInjectPrefetch: {
      total_size += 2 + 1;
      break;
    }
    case OPTIONAL_INJECT_PREFETCH_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OptimizationOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OptimizationOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OptimizationOptions::GetClassData() const { return &_class_data_; }

void OptimizationOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OptimizationOptions *>(to)->MergeFrom(
      static_cast<const OptimizationOptions &>(from));
}


void OptimizationOptions::MergeFrom(const OptimizationOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.OptimizationOptions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.optional_apply_default_optimizations_case()) {
    case kApplyDefaultOptimizations: {
      _internal_set_apply_default_optimizations(from._internal_apply_default_optimizations());
      break;
    }
    case OPTIONAL_APPLY_DEFAULT_OPTIMIZATIONS_NOT_SET: {
      break;
    }
  }
  switch (from.optional_filter_fusion_case()) {
    case kFilterFusion: {
      _internal_set_filter_fusion(from._internal_filter_fusion());
      break;
    }
    case OPTIONAL_FILTER_FUSION_NOT_SET: {
      break;
    }
  }
  switch (from.optional_map_and_batch_fusion_case()) {
    case kMapAndBatchFusion: {
      _internal_set_map_and_batch_fusion(from._internal_map_and_batch_fusion());
      break;
    }
    case OPTIONAL_MAP_AND_BATCH_FUSION_NOT_SET: {
      break;
    }
  }
  switch (from.optional_map_and_filter_fusion_case()) {
    case kMapAndFilterFusion: {
      _internal_set_map_and_filter_fusion(from._internal_map_and_filter_fusion());
      break;
    }
    case OPTIONAL_MAP_AND_FILTER_FUSION_NOT_SET: {
      break;
    }
  }
  switch (from.optional_map_fusion_case()) {
    case kMapFusion: {
      _internal_set_map_fusion(from._internal_map_fusion());
      break;
    }
    case OPTIONAL_MAP_FUSION_NOT_SET: {
      break;
    }
  }
  switch (from.optional_map_parallelization_case()) {
    case kMapParallelization: {
      _internal_set_map_parallelization(from._internal_map_parallelization());
      break;
    }
    case OPTIONAL_MAP_PARALLELIZATION_NOT_SET: {
      break;
    }
  }
  switch (from.optional_noop_elimination_case()) {
    case kNoopElimination: {
      _internal_set_noop_elimination(from._internal_noop_elimination());
      break;
    }
    case OPTIONAL_NOOP_ELIMINATION_NOT_SET: {
      break;
    }
  }
  switch (from.optional_parallel_batch_case()) {
    case kParallelBatch: {
      _internal_set_parallel_batch(from._internal_parallel_batch());
      break;
    }
    case OPTIONAL_PARALLEL_BATCH_NOT_SET: {
      break;
    }
  }
  switch (from.optional_shuffle_and_repeat_fusion_case()) {
    case kShuffleAndRepeatFusion: {
      _internal_set_shuffle_and_repeat_fusion(from._internal_shuffle_and_repeat_fusion());
      break;
    }
    case OPTIONAL_SHUFFLE_AND_REPEAT_FUSION_NOT_SET: {
      break;
    }
  }
  switch (from.optional_filter_parallelization_case()) {
    case kFilterParallelization: {
      _internal_set_filter_parallelization(from._internal_filter_parallelization());
      break;
    }
    case OPTIONAL_FILTER_PARALLELIZATION_NOT_SET: {
      break;
    }
  }
  switch (from.optional_inject_prefetch_case()) {
    case kInjectPrefetch: {
      _internal_set_inject_prefetch(from._internal_inject_prefetch());
      break;
    }
    case OPTIONAL_INJECT_PREFETCH_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OptimizationOptions::CopyFrom(const OptimizationOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.OptimizationOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptimizationOptions::IsInitialized() const {
  return true;
}

void OptimizationOptions::InternalSwap(OptimizationOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(optional_apply_default_optimizations_, other->optional_apply_default_optimizations_);
  swap(optional_filter_fusion_, other->optional_filter_fusion_);
  swap(optional_map_and_batch_fusion_, other->optional_map_and_batch_fusion_);
  swap(optional_map_and_filter_fusion_, other->optional_map_and_filter_fusion_);
  swap(optional_map_fusion_, other->optional_map_fusion_);
  swap(optional_map_parallelization_, other->optional_map_parallelization_);
  swap(optional_noop_elimination_, other->optional_noop_elimination_);
  swap(optional_parallel_batch_, other->optional_parallel_batch_);
  swap(optional_shuffle_and_repeat_fusion_, other->optional_shuffle_and_repeat_fusion_);
  swap(optional_filter_parallelization_, other->optional_filter_parallelization_);
  swap(optional_inject_prefetch_, other->optional_inject_prefetch_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
  swap(_oneof_case_[3], other->_oneof_case_[3]);
  swap(_oneof_case_[4], other->_oneof_case_[4]);
  swap(_oneof_case_[5], other->_oneof_case_[5]);
  swap(_oneof_case_[6], other->_oneof_case_[6]);
  swap(_oneof_case_[7], other->_oneof_case_[7]);
  swap(_oneof_case_[8], other->_oneof_case_[8]);
  swap(_oneof_case_[9], other->_oneof_case_[9]);
  swap(_oneof_case_[10], other->_oneof_case_[10]);
}

::PROTOBUF_NAMESPACE_ID::Metadata OptimizationOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dataset_5foptions_2eproto_getter, &descriptor_table_dataset_5foptions_2eproto_once,
      file_level_metadata_dataset_5foptions_2eproto[3]);
}

// ===================================================================

class ThreadingOptions::_Internal {
 public:
};

ThreadingOptions::ThreadingOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tensorflow.data.ThreadingOptions)
}
ThreadingOptions::ThreadingOptions(const ThreadingOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_optional_max_intra_op_parallelism();
  switch (from.optional_max_intra_op_parallelism_case()) {
    case kMaxIntraOpParallelism: {
      _internal_set_max_intra_op_parallelism(from._internal_max_intra_op_parallelism());
      break;
    }
    case OPTIONAL_MAX_INTRA_OP_PARALLELISM_NOT_SET: {
      break;
    }
  }
  clear_has_optional_private_threadpool_size();
  switch (from.optional_private_threadpool_size_case()) {
    case kPrivateThreadpoolSize: {
      _internal_set_private_threadpool_size(from._internal_private_threadpool_size());
      break;
    }
    case OPTIONAL_PRIVATE_THREADPOOL_SIZE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.ThreadingOptions)
}

inline void ThreadingOptions::SharedCtor() {
clear_has_optional_max_intra_op_parallelism();
clear_has_optional_private_threadpool_size();
}

ThreadingOptions::~ThreadingOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.data.ThreadingOptions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ThreadingOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_optional_max_intra_op_parallelism()) {
    clear_optional_max_intra_op_parallelism();
  }
  if (has_optional_private_threadpool_size()) {
    clear_optional_private_threadpool_size();
  }
}

void ThreadingOptions::ArenaDtor(void* object) {
  ThreadingOptions* _this = reinterpret_cast< ThreadingOptions* >(object);
  (void)_this;
}
void ThreadingOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThreadingOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ThreadingOptions::clear_optional_max_intra_op_parallelism() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.ThreadingOptions)
  switch (optional_max_intra_op_parallelism_case()) {
    case kMaxIntraOpParallelism: {
      // No need to clear
      break;
    }
    case OPTIONAL_MAX_INTRA_OP_PARALLELISM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTIONAL_MAX_INTRA_OP_PARALLELISM_NOT_SET;
}

void ThreadingOptions::clear_optional_private_threadpool_size() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.ThreadingOptions)
  switch (optional_private_threadpool_size_case()) {
    case kPrivateThreadpoolSize: {
      // No need to clear
      break;
    }
    case OPTIONAL_PRIVATE_THREADPOOL_SIZE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = OPTIONAL_PRIVATE_THREADPOOL_SIZE_NOT_SET;
}


void ThreadingOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.ThreadingOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_optional_max_intra_op_parallelism();
  clear_optional_private_threadpool_size();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThreadingOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 max_intra_op_parallelism = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_max_intra_op_parallelism(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 private_threadpool_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_private_threadpool_size(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThreadingOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.ThreadingOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_intra_op_parallelism = 1;
  if (_internal_has_max_intra_op_parallelism()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_max_intra_op_parallelism(), target);
  }

  // int32 private_threadpool_size = 2;
  if (_internal_has_private_threadpool_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_private_threadpool_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.ThreadingOptions)
  return target;
}

size_t ThreadingOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.ThreadingOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (optional_max_intra_op_parallelism_case()) {
    // int32 max_intra_op_parallelism = 1;
    case kMaxIntraOpParallelism: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_max_intra_op_parallelism());
      break;
    }
    case OPTIONAL_MAX_INTRA_OP_PARALLELISM_NOT_SET: {
      break;
    }
  }
  switch (optional_private_threadpool_size_case()) {
    // int32 private_threadpool_size = 2;
    case kPrivateThreadpoolSize: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_private_threadpool_size());
      break;
    }
    case OPTIONAL_PRIVATE_THREADPOOL_SIZE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThreadingOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ThreadingOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThreadingOptions::GetClassData() const { return &_class_data_; }

void ThreadingOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ThreadingOptions *>(to)->MergeFrom(
      static_cast<const ThreadingOptions &>(from));
}


void ThreadingOptions::MergeFrom(const ThreadingOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.ThreadingOptions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.optional_max_intra_op_parallelism_case()) {
    case kMaxIntraOpParallelism: {
      _internal_set_max_intra_op_parallelism(from._internal_max_intra_op_parallelism());
      break;
    }
    case OPTIONAL_MAX_INTRA_OP_PARALLELISM_NOT_SET: {
      break;
    }
  }
  switch (from.optional_private_threadpool_size_case()) {
    case kPrivateThreadpoolSize: {
      _internal_set_private_threadpool_size(from._internal_private_threadpool_size());
      break;
    }
    case OPTIONAL_PRIVATE_THREADPOOL_SIZE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThreadingOptions::CopyFrom(const ThreadingOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.ThreadingOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThreadingOptions::IsInitialized() const {
  return true;
}

void ThreadingOptions::InternalSwap(ThreadingOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(optional_max_intra_op_parallelism_, other->optional_max_intra_op_parallelism_);
  swap(optional_private_threadpool_size_, other->optional_private_threadpool_size_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThreadingOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dataset_5foptions_2eproto_getter, &descriptor_table_dataset_5foptions_2eproto_once,
      file_level_metadata_dataset_5foptions_2eproto[4]);
}

// ===================================================================

class Options::_Internal {
 public:
  static const ::tensorflow::data::AutotuneOptions& autotune_options(const Options* msg);
  static const ::tensorflow::data::DistributeOptions& distribute_options(const Options* msg);
  static const ::tensorflow::data::OptimizationOptions& optimization_options(const Options* msg);
  static const ::tensorflow::data::ThreadingOptions& threading_options(const Options* msg);
};

const ::tensorflow::data::AutotuneOptions&
Options::_Internal::autotune_options(const Options* msg) {
  return *msg->autotune_options_;
}
const ::tensorflow::data::DistributeOptions&
Options::_Internal::distribute_options(const Options* msg) {
  return *msg->distribute_options_;
}
const ::tensorflow::data::OptimizationOptions&
Options::_Internal::optimization_options(const Options* msg) {
  return *msg->optimization_options_;
}
const ::tensorflow::data::ThreadingOptions&
Options::_Internal::threading_options(const Options* msg) {
  return *msg->threading_options_;
}
Options::Options(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tensorflow.data.Options)
}
Options::Options(const Options& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_distribute_options()) {
    distribute_options_ = new ::tensorflow::data::DistributeOptions(*from.distribute_options_);
  } else {
    distribute_options_ = nullptr;
  }
  if (from._internal_has_optimization_options()) {
    optimization_options_ = new ::tensorflow::data::OptimizationOptions(*from.optimization_options_);
  } else {
    optimization_options_ = nullptr;
  }
  if (from._internal_has_threading_options()) {
    threading_options_ = new ::tensorflow::data::ThreadingOptions(*from.threading_options_);
  } else {
    threading_options_ = nullptr;
  }
  if (from._internal_has_autotune_options()) {
    autotune_options_ = new ::tensorflow::data::AutotuneOptions(*from.autotune_options_);
  } else {
    autotune_options_ = nullptr;
  }
  clear_has_optional_deterministic();
  switch (from.optional_deterministic_case()) {
    case kDeterministic: {
      _internal_set_deterministic(from._internal_deterministic());
      break;
    }
    case OPTIONAL_DETERMINISTIC_NOT_SET: {
      break;
    }
  }
  clear_has_optional_slack();
  switch (from.optional_slack_case()) {
    case kSlack: {
      _internal_set_slack(from._internal_slack());
      break;
    }
    case OPTIONAL_SLACK_NOT_SET: {
      break;
    }
  }
  clear_has_optional_external_state_policy();
  switch (from.optional_external_state_policy_case()) {
    case kExternalStatePolicy: {
      _internal_set_external_state_policy(from._internal_external_state_policy());
      break;
    }
    case OPTIONAL_EXTERNAL_STATE_POLICY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.Options)
}

inline void Options::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&distribute_options_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&autotune_options_) -
    reinterpret_cast<char*>(&distribute_options_)) + sizeof(autotune_options_));
clear_has_optional_deterministic();
clear_has_optional_slack();
clear_has_optional_external_state_policy();
}

Options::~Options() {
  // @@protoc_insertion_point(destructor:tensorflow.data.Options)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Options::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete distribute_options_;
  if (this != internal_default_instance()) delete optimization_options_;
  if (this != internal_default_instance()) delete threading_options_;
  if (this != internal_default_instance()) delete autotune_options_;
  if (has_optional_deterministic()) {
    clear_optional_deterministic();
  }
  if (has_optional_slack()) {
    clear_optional_slack();
  }
  if (has_optional_external_state_policy()) {
    clear_optional_external_state_policy();
  }
}

void Options::ArenaDtor(void* object) {
  Options* _this = reinterpret_cast< Options* >(object);
  (void)_this;
}
void Options::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Options::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Options::clear_optional_deterministic() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.Options)
  switch (optional_deterministic_case()) {
    case kDeterministic: {
      // No need to clear
      break;
    }
    case OPTIONAL_DETERMINISTIC_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTIONAL_DETERMINISTIC_NOT_SET;
}

void Options::clear_optional_slack() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.Options)
  switch (optional_slack_case()) {
    case kSlack: {
      // No need to clear
      break;
    }
    case OPTIONAL_SLACK_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = OPTIONAL_SLACK_NOT_SET;
}

void Options::clear_optional_external_state_policy() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.Options)
  switch (optional_external_state_policy_case()) {
    case kExternalStatePolicy: {
      // No need to clear
      break;
    }
    case OPTIONAL_EXTERNAL_STATE_POLICY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[2] = OPTIONAL_EXTERNAL_STATE_POLICY_NOT_SET;
}


void Options::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.Options)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && distribute_options_ != nullptr) {
    delete distribute_options_;
  }
  distribute_options_ = nullptr;
  if (GetArenaForAllocation() == nullptr && optimization_options_ != nullptr) {
    delete optimization_options_;
  }
  optimization_options_ = nullptr;
  if (GetArenaForAllocation() == nullptr && threading_options_ != nullptr) {
    delete threading_options_;
  }
  threading_options_ = nullptr;
  if (GetArenaForAllocation() == nullptr && autotune_options_ != nullptr) {
    delete autotune_options_;
  }
  autotune_options_ = nullptr;
  clear_optional_deterministic();
  clear_optional_slack();
  clear_optional_external_state_policy();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Options::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool deterministic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_deterministic(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.data.DistributeOptions distribute_options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_distribute_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.data.OptimizationOptions optimization_options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_optimization_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool slack = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _internal_set_slack(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.data.ThreadingOptions threading_options = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_threading_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.data.ExternalStatePolicy external_state_policy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_external_state_policy(static_cast<::tensorflow::data::ExternalStatePolicy>(val));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.data.AutotuneOptions autotune_options = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_autotune_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Options::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.Options)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool deterministic = 1;
  if (_internal_has_deterministic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_deterministic(), target);
  }

  // .tensorflow.data.DistributeOptions distribute_options = 2;
  if (this->_internal_has_distribute_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::distribute_options(this), target, stream);
  }

  // .tensorflow.data.OptimizationOptions optimization_options = 3;
  if (this->_internal_has_optimization_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::optimization_options(this), target, stream);
  }

  // bool slack = 4;
  if (_internal_has_slack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_slack(), target);
  }

  // .tensorflow.data.ThreadingOptions threading_options = 5;
  if (this->_internal_has_threading_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::threading_options(this), target, stream);
  }

  // .tensorflow.data.ExternalStatePolicy external_state_policy = 6;
  if (_internal_has_external_state_policy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_external_state_policy(), target);
  }

  // .tensorflow.data.AutotuneOptions autotune_options = 7;
  if (this->_internal_has_autotune_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::autotune_options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.Options)
  return target;
}

size_t Options::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.Options)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.data.DistributeOptions distribute_options = 2;
  if (this->_internal_has_distribute_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *distribute_options_);
  }

  // .tensorflow.data.OptimizationOptions optimization_options = 3;
  if (this->_internal_has_optimization_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optimization_options_);
  }

  // .tensorflow.data.ThreadingOptions threading_options = 5;
  if (this->_internal_has_threading_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *threading_options_);
  }

  // .tensorflow.data.AutotuneOptions autotune_options = 7;
  if (this->_internal_has_autotune_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *autotune_options_);
  }

  switch (optional_deterministic_case()) {
    // bool deterministic = 1;
    case kDeterministic: {
      total_size += 1 + 1;
      break;
    }
    case OPTIONAL_DETERMINISTIC_NOT_SET: {
      break;
    }
  }
  switch (optional_slack_case()) {
    // bool slack = 4;
    case kSlack: {
      total_size += 1 + 1;
      break;
    }
    case OPTIONAL_SLACK_NOT_SET: {
      break;
    }
  }
  switch (optional_external_state_policy_case()) {
    // .tensorflow.data.ExternalStatePolicy external_state_policy = 6;
    case kExternalStatePolicy: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_external_state_policy());
      break;
    }
    case OPTIONAL_EXTERNAL_STATE_POLICY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Options::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Options::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Options::GetClassData() const { return &_class_data_; }

void Options::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Options *>(to)->MergeFrom(
      static_cast<const Options &>(from));
}


void Options::MergeFrom(const Options& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.Options)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_distribute_options()) {
    _internal_mutable_distribute_options()->::tensorflow::data::DistributeOptions::MergeFrom(from._internal_distribute_options());
  }
  if (from._internal_has_optimization_options()) {
    _internal_mutable_optimization_options()->::tensorflow::data::OptimizationOptions::MergeFrom(from._internal_optimization_options());
  }
  if (from._internal_has_threading_options()) {
    _internal_mutable_threading_options()->::tensorflow::data::ThreadingOptions::MergeFrom(from._internal_threading_options());
  }
  if (from._internal_has_autotune_options()) {
    _internal_mutable_autotune_options()->::tensorflow::data::AutotuneOptions::MergeFrom(from._internal_autotune_options());
  }
  switch (from.optional_deterministic_case()) {
    case kDeterministic: {
      _internal_set_deterministic(from._internal_deterministic());
      break;
    }
    case OPTIONAL_DETERMINISTIC_NOT_SET: {
      break;
    }
  }
  switch (from.optional_slack_case()) {
    case kSlack: {
      _internal_set_slack(from._internal_slack());
      break;
    }
    case OPTIONAL_SLACK_NOT_SET: {
      break;
    }
  }
  switch (from.optional_external_state_policy_case()) {
    case kExternalStatePolicy: {
      _internal_set_external_state_policy(from._internal_external_state_policy());
      break;
    }
    case OPTIONAL_EXTERNAL_STATE_POLICY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Options::CopyFrom(const Options& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Options::IsInitialized() const {
  return true;
}

void Options::InternalSwap(Options* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Options, autotune_options_)
      + sizeof(Options::autotune_options_)
      - PROTOBUF_FIELD_OFFSET(Options, distribute_options_)>(
          reinterpret_cast<char*>(&distribute_options_),
          reinterpret_cast<char*>(&other->distribute_options_));
  swap(optional_deterministic_, other->optional_deterministic_);
  swap(optional_slack_, other->optional_slack_);
  swap(optional_external_state_policy_, other->optional_external_state_policy_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
  swap(_oneof_case_[2], other->_oneof_case_[2]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Options::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_dataset_5foptions_2eproto_getter, &descriptor_table_dataset_5foptions_2eproto_once,
      file_level_metadata_dataset_5foptions_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace data
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::data::AutotuneOptions* Arena::CreateMaybeMessage< ::tensorflow::data::AutotuneOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::data::AutotuneOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::data::CardinalityOptions* Arena::CreateMaybeMessage< ::tensorflow::data::CardinalityOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::data::CardinalityOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::data::DistributeOptions* Arena::CreateMaybeMessage< ::tensorflow::data::DistributeOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::data::DistributeOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::data::OptimizationOptions* Arena::CreateMaybeMessage< ::tensorflow::data::OptimizationOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::data::OptimizationOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::data::ThreadingOptions* Arena::CreateMaybeMessage< ::tensorflow::data::ThreadingOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::data::ThreadingOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::data::Options* Arena::CreateMaybeMessage< ::tensorflow::data::Options >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::data::Options >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
