// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model.proto

#include "model.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace tensorflow {
namespace data {
namespace model {
constexpr ModelProto_Node_Parameter::ModelProto_Node_Parameter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(0)
  , state_value_(0)
  , min_(0)
  , max_(0)
  , tunable_(false){}
struct ModelProto_Node_ParameterDefaultTypeInternal {
  constexpr ModelProto_Node_ParameterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModelProto_Node_ParameterDefaultTypeInternal() {}
  union {
    ModelProto_Node_Parameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModelProto_Node_ParameterDefaultTypeInternal _ModelProto_Node_Parameter_default_instance_;
constexpr ModelProto_Node::ModelProto_Node(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parameters_()
  , inputs_()
  , _inputs_cached_byte_size_(0)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(int64_t{0})
  , buffered_bytes_(int64_t{0})
  , buffered_elements_(int64_t{0})
  , bytes_consumed_(int64_t{0})
  , bytes_produced_(int64_t{0})
  , num_elements_(int64_t{0})
  , processing_time_(int64_t{0})
  , autotune_(false)
  , record_metrics_(false)
  , node_class_(0)

  , input_processing_time_sum_(0)
  , input_processing_time_count_(int64_t{0})
  , ratio_(0)
  , memory_ratio_(0){}
struct ModelProto_NodeDefaultTypeInternal {
  constexpr ModelProto_NodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModelProto_NodeDefaultTypeInternal() {}
  union {
    ModelProto_Node _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModelProto_NodeDefaultTypeInternal _ModelProto_Node_default_instance_;
constexpr ModelProto_NodesEntry_DoNotUse::ModelProto_NodesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ModelProto_NodesEntry_DoNotUseDefaultTypeInternal {
  constexpr ModelProto_NodesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModelProto_NodesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ModelProto_NodesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModelProto_NodesEntry_DoNotUseDefaultTypeInternal _ModelProto_NodesEntry_DoNotUse_default_instance_;
constexpr ModelProto_OptimizationParams::ModelProto_OptimizationParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cpu_budget_(int64_t{0})
  , ram_budget_(int64_t{0})
  , model_input_time_(0)
  , algorithm_(0)
{}
struct ModelProto_OptimizationParamsDefaultTypeInternal {
  constexpr ModelProto_OptimizationParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModelProto_OptimizationParamsDefaultTypeInternal() {}
  union {
    ModelProto_OptimizationParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModelProto_OptimizationParamsDefaultTypeInternal _ModelProto_OptimizationParams_default_instance_;
constexpr ModelProto::ModelProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nodes_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , optimization_params_(nullptr)
  , output_(int64_t{0})
  , id_counter_(int64_t{0}){}
struct ModelProtoDefaultTypeInternal {
  constexpr ModelProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModelProtoDefaultTypeInternal() {}
  union {
    ModelProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModelProtoDefaultTypeInternal _ModelProto_default_instance_;
}  // namespace model
}  // namespace data
}  // namespace tensorflow
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_model_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_model_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_model_2eproto = nullptr;

const uint32_t TableStruct_model_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto_Node_Parameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto_Node_Parameter, name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto_Node_Parameter, value_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto_Node_Parameter, state_value_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto_Node_Parameter, min_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto_Node_Parameter, max_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto_Node_Parameter, tunable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto_Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto_Node, id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto_Node, name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto_Node, autotune_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto_Node, buffered_bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto_Node, buffered_elements_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto_Node, bytes_consumed_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto_Node, bytes_produced_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto_Node, num_elements_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto_Node, processing_time_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto_Node, record_metrics_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto_Node, parameters_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto_Node, input_processing_time_sum_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto_Node, input_processing_time_count_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto_Node, inputs_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto_Node, node_class_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto_Node, ratio_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto_Node, memory_ratio_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto_NodesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto_NodesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto_NodesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto_NodesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto_OptimizationParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto_OptimizationParams, algorithm_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto_OptimizationParams, cpu_budget_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto_OptimizationParams, ram_budget_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto_OptimizationParams, model_input_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto, nodes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto, output_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto, id_counter_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::model::ModelProto, optimization_params_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::data::model::ModelProto_Node_Parameter)},
  { 12, -1, -1, sizeof(::tensorflow::data::model::ModelProto_Node)},
  { 35, 43, -1, sizeof(::tensorflow::data::model::ModelProto_NodesEntry_DoNotUse)},
  { 45, -1, -1, sizeof(::tensorflow::data::model::ModelProto_OptimizationParams)},
  { 55, -1, -1, sizeof(::tensorflow::data::model::ModelProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::data::model::_ModelProto_Node_Parameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::data::model::_ModelProto_Node_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::data::model::_ModelProto_NodesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::data::model::_ModelProto_OptimizationParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorflow::data::model::_ModelProto_default_instance_),
};

const char descriptor_table_protodef_model_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013model.proto\022\025tensorflow.data.model\"\364\007\n"
  "\nModelProto\022;\n\005nodes\030\001 \003(\0132,.tensorflow."
  "data.model.ModelProto.NodesEntry\022\016\n\006outp"
  "ut\030\002 \001(\003\022\022\n\nid_counter\030\003 \001(\003\022Q\n\023optimiza"
  "tion_params\030\005 \001(\01324.tensorflow.data.mode"
  "l.ModelProto.OptimizationParams\032\277\004\n\004Node"
  "\022\n\n\002id\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022\020\n\010autotune\030\003"
  " \001(\010\022\026\n\016buffered_bytes\030\004 \001(\003\022\031\n\021buffered"
  "_elements\030\005 \001(\003\022\026\n\016bytes_consumed\030\006 \001(\003\022"
  "\026\n\016bytes_produced\030\007 \001(\003\022\024\n\014num_elements\030"
  "\010 \001(\003\022\027\n\017processing_time\030\t \001(\003\022\026\n\016record"
  "_metrics\030\n \001(\010\022D\n\nparameters\030\013 \003(\01320.ten"
  "sorflow.data.model.ModelProto.Node.Param"
  "eter\022!\n\031input_processing_time_sum\030\014 \001(\001\022"
  "#\n\033input_processing_time_count\030\r \001(\003\022\016\n\006"
  "inputs\030\016 \003(\003\0224\n\nnode_class\030\017 \001(\0162 .tenso"
  "rflow.data.model.NodeClass\022\r\n\005ratio\030\020 \001("
  "\001\022\024\n\014memory_ratio\030\021 \001(\001\032h\n\tParameter\022\014\n\004"
  "name\030\001 \001(\t\022\r\n\005value\030\002 \001(\001\022\023\n\013state_value"
  "\030\003 \001(\001\022\013\n\003min\030\004 \001(\001\022\013\n\003max\030\005 \001(\001\022\017\n\007tuna"
  "ble\030\006 \001(\010\032T\n\nNodesEntry\022\013\n\003key\030\001 \001(\003\0225\n\005"
  "value\030\002 \001(\0132&.tensorflow.data.model.Mode"
  "lProto.Node:\0028\001\032\223\001\n\022OptimizationParams\022;"
  "\n\talgorithm\030\001 \001(\0162(.tensorflow.data.mode"
  "l.AutotuneAlgorithm\022\022\n\ncpu_budget\030\002 \001(\003\022"
  "\022\n\nram_budget\030\003 \001(\003\022\030\n\020model_input_time\030"
  "\004 \001(\001J\004\010\004\020\005*\234\001\n\tNodeClass\022\013\n\007UNKNOWN\020\000\022\023"
  "\n\017INTERLEAVE_MANY\020\001\022\031\n\025ASYNC_INTERLEAVE_"
  "MANY\020\002\022\017\n\013KNOWN_RATIO\020\003\022\025\n\021ASYNC_KNOWN_R"
  "ATIO\020\004\022\021\n\rUNKNOWN_RATIO\020\005\022\027\n\023ASYNC_UNKNO"
  "WN_RATIO\020\006*l\n\021AutotuneAlgorithm\022\013\n\007DEFAU"
  "LT\020\000\022\016\n\nHILL_CLIMB\020\001\022\024\n\020GRADIENT_DESCENT"
  "\020\002\022\023\n\017MAX_PARALLELISM\020\003\022\017\n\013STAGE_BASED\020\004"
  "BQZLgithub.com/tensorflow/tensorflow/ten"
  "sorflow/go/core/framework/model_go_proto"
  "\370\001\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_model_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_model_2eproto = {
  false, false, 1411, descriptor_table_protodef_model_2eproto, "model.proto", 
  &descriptor_table_model_2eproto_once, nullptr, 0, 5,
  schemas, file_default_instances, TableStruct_model_2eproto::offsets,
  file_level_metadata_model_2eproto, file_level_enum_descriptors_model_2eproto, file_level_service_descriptors_model_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_model_2eproto_getter() {
  return &descriptor_table_model_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_model_2eproto(&descriptor_table_model_2eproto);
namespace tensorflow {
namespace data {
namespace model {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NodeClass_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_model_2eproto);
  return file_level_enum_descriptors_model_2eproto[0];
}
bool NodeClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AutotuneAlgorithm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_model_2eproto);
  return file_level_enum_descriptors_model_2eproto[1];
}
bool AutotuneAlgorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ModelProto_Node_Parameter::_Internal {
 public:
};

ModelProto_Node_Parameter::ModelProto_Node_Parameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tensorflow.data.model.ModelProto.Node.Parameter)
}
ModelProto_Node_Parameter::ModelProto_Node_Parameter(const ModelProto_Node_Parameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&tunable_) -
    reinterpret_cast<char*>(&value_)) + sizeof(tunable_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.model.ModelProto.Node.Parameter)
}

inline void ModelProto_Node_Parameter::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tunable_) -
    reinterpret_cast<char*>(&value_)) + sizeof(tunable_));
}

ModelProto_Node_Parameter::~ModelProto_Node_Parameter() {
  // @@protoc_insertion_point(destructor:tensorflow.data.model.ModelProto.Node.Parameter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ModelProto_Node_Parameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelProto_Node_Parameter::ArenaDtor(void* object) {
  ModelProto_Node_Parameter* _this = reinterpret_cast< ModelProto_Node_Parameter* >(object);
  (void)_this;
}
void ModelProto_Node_Parameter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelProto_Node_Parameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelProto_Node_Parameter::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.model.ModelProto.Node.Parameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tunable_) -
      reinterpret_cast<char*>(&value_)) + sizeof(tunable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelProto_Node_Parameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.data.model.ModelProto.Node.Parameter.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double state_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          state_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double min = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double max = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool tunable = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          tunable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelProto_Node_Parameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.model.ModelProto.Node.Parameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.model.ModelProto.Node.Parameter.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // double value = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = this->_internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_value(), target);
  }

  // double state_value = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_state_value = this->_internal_state_value();
  uint64_t raw_state_value;
  memcpy(&raw_state_value, &tmp_state_value, sizeof(tmp_state_value));
  if (raw_state_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_state_value(), target);
  }

  // double min = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min = this->_internal_min();
  uint64_t raw_min;
  memcpy(&raw_min, &tmp_min, sizeof(tmp_min));
  if (raw_min != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_min(), target);
  }

  // double max = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max = this->_internal_max();
  uint64_t raw_max;
  memcpy(&raw_max, &tmp_max, sizeof(tmp_max));
  if (raw_max != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_max(), target);
  }

  // bool tunable = 6;
  if (this->_internal_tunable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_tunable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.model.ModelProto.Node.Parameter)
  return target;
}

size_t ModelProto_Node_Parameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.model.ModelProto.Node.Parameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // double value = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = this->_internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 8;
  }

  // double state_value = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_state_value = this->_internal_state_value();
  uint64_t raw_state_value;
  memcpy(&raw_state_value, &tmp_state_value, sizeof(tmp_state_value));
  if (raw_state_value != 0) {
    total_size += 1 + 8;
  }

  // double min = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min = this->_internal_min();
  uint64_t raw_min;
  memcpy(&raw_min, &tmp_min, sizeof(tmp_min));
  if (raw_min != 0) {
    total_size += 1 + 8;
  }

  // double max = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max = this->_internal_max();
  uint64_t raw_max;
  memcpy(&raw_max, &tmp_max, sizeof(tmp_max));
  if (raw_max != 0) {
    total_size += 1 + 8;
  }

  // bool tunable = 6;
  if (this->_internal_tunable() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelProto_Node_Parameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModelProto_Node_Parameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelProto_Node_Parameter::GetClassData() const { return &_class_data_; }

void ModelProto_Node_Parameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModelProto_Node_Parameter *>(to)->MergeFrom(
      static_cast<const ModelProto_Node_Parameter &>(from));
}


void ModelProto_Node_Parameter::MergeFrom(const ModelProto_Node_Parameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.model.ModelProto.Node.Parameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = from._internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _internal_set_value(from._internal_value());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_state_value = from._internal_state_value();
  uint64_t raw_state_value;
  memcpy(&raw_state_value, &tmp_state_value, sizeof(tmp_state_value));
  if (raw_state_value != 0) {
    _internal_set_state_value(from._internal_state_value());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min = from._internal_min();
  uint64_t raw_min;
  memcpy(&raw_min, &tmp_min, sizeof(tmp_min));
  if (raw_min != 0) {
    _internal_set_min(from._internal_min());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max = from._internal_max();
  uint64_t raw_max;
  memcpy(&raw_max, &tmp_max, sizeof(tmp_max));
  if (raw_max != 0) {
    _internal_set_max(from._internal_max());
  }
  if (from._internal_tunable() != 0) {
    _internal_set_tunable(from._internal_tunable());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelProto_Node_Parameter::CopyFrom(const ModelProto_Node_Parameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.model.ModelProto.Node.Parameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelProto_Node_Parameter::IsInitialized() const {
  return true;
}

void ModelProto_Node_Parameter::InternalSwap(ModelProto_Node_Parameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelProto_Node_Parameter, tunable_)
      + sizeof(ModelProto_Node_Parameter::tunable_)
      - PROTOBUF_FIELD_OFFSET(ModelProto_Node_Parameter, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelProto_Node_Parameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_model_2eproto_getter, &descriptor_table_model_2eproto_once,
      file_level_metadata_model_2eproto[0]);
}

// ===================================================================

class ModelProto_Node::_Internal {
 public:
};

ModelProto_Node::ModelProto_Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  parameters_(arena),
  inputs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tensorflow.data.model.ModelProto.Node)
}
ModelProto_Node::ModelProto_Node(const ModelProto_Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      parameters_(from.parameters_),
      inputs_(from.inputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&memory_ratio_) -
    reinterpret_cast<char*>(&id_)) + sizeof(memory_ratio_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.model.ModelProto.Node)
}

inline void ModelProto_Node::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&memory_ratio_) -
    reinterpret_cast<char*>(&id_)) + sizeof(memory_ratio_));
}

ModelProto_Node::~ModelProto_Node() {
  // @@protoc_insertion_point(destructor:tensorflow.data.model.ModelProto.Node)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ModelProto_Node::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelProto_Node::ArenaDtor(void* object) {
  ModelProto_Node* _this = reinterpret_cast< ModelProto_Node* >(object);
  (void)_this;
}
void ModelProto_Node::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelProto_Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelProto_Node::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.model.ModelProto.Node)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parameters_.Clear();
  inputs_.Clear();
  name_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&memory_ratio_) -
      reinterpret_cast<char*>(&id_)) + sizeof(memory_ratio_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelProto_Node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorflow.data.model.ModelProto.Node.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool autotune = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          autotune_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 buffered_bytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          buffered_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 buffered_elements = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          buffered_elements_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 bytes_consumed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          bytes_consumed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 bytes_produced = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          bytes_produced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 num_elements = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          num_elements_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 processing_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          processing_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool record_metrics = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          record_metrics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.data.model.ModelProto.Node.Parameter parameters = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // double input_processing_time_sum = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          input_processing_time_sum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int64 input_processing_time_count = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          input_processing_time_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 inputs = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_inputs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 112) {
          _internal_add_inputs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.data.model.NodeClass node_class = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_node_class(static_cast<::tensorflow::data::model::NodeClass>(val));
        } else
          goto handle_unusual;
        continue;
      // double ratio = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double memory_ratio = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          memory_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelProto_Node::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.model.ModelProto.Node)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.model.ModelProto.Node.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // bool autotune = 3;
  if (this->_internal_autotune() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_autotune(), target);
  }

  // int64 buffered_bytes = 4;
  if (this->_internal_buffered_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_buffered_bytes(), target);
  }

  // int64 buffered_elements = 5;
  if (this->_internal_buffered_elements() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_buffered_elements(), target);
  }

  // int64 bytes_consumed = 6;
  if (this->_internal_bytes_consumed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_bytes_consumed(), target);
  }

  // int64 bytes_produced = 7;
  if (this->_internal_bytes_produced() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_bytes_produced(), target);
  }

  // int64 num_elements = 8;
  if (this->_internal_num_elements() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_num_elements(), target);
  }

  // int64 processing_time = 9;
  if (this->_internal_processing_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_processing_time(), target);
  }

  // bool record_metrics = 10;
  if (this->_internal_record_metrics() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_record_metrics(), target);
  }

  // repeated .tensorflow.data.model.ModelProto.Node.Parameter parameters = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parameters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_parameters(i), target, stream);
  }

  // double input_processing_time_sum = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_input_processing_time_sum = this->_internal_input_processing_time_sum();
  uint64_t raw_input_processing_time_sum;
  memcpy(&raw_input_processing_time_sum, &tmp_input_processing_time_sum, sizeof(tmp_input_processing_time_sum));
  if (raw_input_processing_time_sum != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_input_processing_time_sum(), target);
  }

  // int64 input_processing_time_count = 13;
  if (this->_internal_input_processing_time_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_input_processing_time_count(), target);
  }

  // repeated int64 inputs = 14;
  {
    int byte_size = _inputs_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          14, _internal_inputs(), byte_size, target);
    }
  }

  // .tensorflow.data.model.NodeClass node_class = 15;
  if (this->_internal_node_class() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      15, this->_internal_node_class(), target);
  }

  // double ratio = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ratio = this->_internal_ratio();
  uint64_t raw_ratio;
  memcpy(&raw_ratio, &tmp_ratio, sizeof(tmp_ratio));
  if (raw_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_ratio(), target);
  }

  // double memory_ratio = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_memory_ratio = this->_internal_memory_ratio();
  uint64_t raw_memory_ratio;
  memcpy(&raw_memory_ratio, &tmp_memory_ratio, sizeof(tmp_memory_ratio));
  if (raw_memory_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_memory_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.model.ModelProto.Node)
  return target;
}

size_t ModelProto_Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.model.ModelProto.Node)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.data.model.ModelProto.Node.Parameter parameters = 11;
  total_size += 1UL * this->_internal_parameters_size();
  for (const auto& msg : this->parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 inputs = 14;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->inputs_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _inputs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // int64 buffered_bytes = 4;
  if (this->_internal_buffered_bytes() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_buffered_bytes());
  }

  // int64 buffered_elements = 5;
  if (this->_internal_buffered_elements() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_buffered_elements());
  }

  // int64 bytes_consumed = 6;
  if (this->_internal_bytes_consumed() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_bytes_consumed());
  }

  // int64 bytes_produced = 7;
  if (this->_internal_bytes_produced() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_bytes_produced());
  }

  // int64 num_elements = 8;
  if (this->_internal_num_elements() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_num_elements());
  }

  // int64 processing_time = 9;
  if (this->_internal_processing_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_processing_time());
  }

  // bool autotune = 3;
  if (this->_internal_autotune() != 0) {
    total_size += 1 + 1;
  }

  // bool record_metrics = 10;
  if (this->_internal_record_metrics() != 0) {
    total_size += 1 + 1;
  }

  // .tensorflow.data.model.NodeClass node_class = 15;
  if (this->_internal_node_class() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_node_class());
  }

  // double input_processing_time_sum = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_input_processing_time_sum = this->_internal_input_processing_time_sum();
  uint64_t raw_input_processing_time_sum;
  memcpy(&raw_input_processing_time_sum, &tmp_input_processing_time_sum, sizeof(tmp_input_processing_time_sum));
  if (raw_input_processing_time_sum != 0) {
    total_size += 1 + 8;
  }

  // int64 input_processing_time_count = 13;
  if (this->_internal_input_processing_time_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_input_processing_time_count());
  }

  // double ratio = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ratio = this->_internal_ratio();
  uint64_t raw_ratio;
  memcpy(&raw_ratio, &tmp_ratio, sizeof(tmp_ratio));
  if (raw_ratio != 0) {
    total_size += 2 + 8;
  }

  // double memory_ratio = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_memory_ratio = this->_internal_memory_ratio();
  uint64_t raw_memory_ratio;
  memcpy(&raw_memory_ratio, &tmp_memory_ratio, sizeof(tmp_memory_ratio));
  if (raw_memory_ratio != 0) {
    total_size += 2 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelProto_Node::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModelProto_Node::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelProto_Node::GetClassData() const { return &_class_data_; }

void ModelProto_Node::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModelProto_Node *>(to)->MergeFrom(
      static_cast<const ModelProto_Node &>(from));
}


void ModelProto_Node::MergeFrom(const ModelProto_Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.model.ModelProto.Node)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  parameters_.MergeFrom(from.parameters_);
  inputs_.MergeFrom(from.inputs_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_buffered_bytes() != 0) {
    _internal_set_buffered_bytes(from._internal_buffered_bytes());
  }
  if (from._internal_buffered_elements() != 0) {
    _internal_set_buffered_elements(from._internal_buffered_elements());
  }
  if (from._internal_bytes_consumed() != 0) {
    _internal_set_bytes_consumed(from._internal_bytes_consumed());
  }
  if (from._internal_bytes_produced() != 0) {
    _internal_set_bytes_produced(from._internal_bytes_produced());
  }
  if (from._internal_num_elements() != 0) {
    _internal_set_num_elements(from._internal_num_elements());
  }
  if (from._internal_processing_time() != 0) {
    _internal_set_processing_time(from._internal_processing_time());
  }
  if (from._internal_autotune() != 0) {
    _internal_set_autotune(from._internal_autotune());
  }
  if (from._internal_record_metrics() != 0) {
    _internal_set_record_metrics(from._internal_record_metrics());
  }
  if (from._internal_node_class() != 0) {
    _internal_set_node_class(from._internal_node_class());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_input_processing_time_sum = from._internal_input_processing_time_sum();
  uint64_t raw_input_processing_time_sum;
  memcpy(&raw_input_processing_time_sum, &tmp_input_processing_time_sum, sizeof(tmp_input_processing_time_sum));
  if (raw_input_processing_time_sum != 0) {
    _internal_set_input_processing_time_sum(from._internal_input_processing_time_sum());
  }
  if (from._internal_input_processing_time_count() != 0) {
    _internal_set_input_processing_time_count(from._internal_input_processing_time_count());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ratio = from._internal_ratio();
  uint64_t raw_ratio;
  memcpy(&raw_ratio, &tmp_ratio, sizeof(tmp_ratio));
  if (raw_ratio != 0) {
    _internal_set_ratio(from._internal_ratio());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_memory_ratio = from._internal_memory_ratio();
  uint64_t raw_memory_ratio;
  memcpy(&raw_memory_ratio, &tmp_memory_ratio, sizeof(tmp_memory_ratio));
  if (raw_memory_ratio != 0) {
    _internal_set_memory_ratio(from._internal_memory_ratio());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelProto_Node::CopyFrom(const ModelProto_Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.model.ModelProto.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelProto_Node::IsInitialized() const {
  return true;
}

void ModelProto_Node::InternalSwap(ModelProto_Node* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  parameters_.InternalSwap(&other->parameters_);
  inputs_.InternalSwap(&other->inputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelProto_Node, memory_ratio_)
      + sizeof(ModelProto_Node::memory_ratio_)
      - PROTOBUF_FIELD_OFFSET(ModelProto_Node, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelProto_Node::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_model_2eproto_getter, &descriptor_table_model_2eproto_once,
      file_level_metadata_model_2eproto[1]);
}

// ===================================================================

ModelProto_NodesEntry_DoNotUse::ModelProto_NodesEntry_DoNotUse() {}
ModelProto_NodesEntry_DoNotUse::ModelProto_NodesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ModelProto_NodesEntry_DoNotUse::MergeFrom(const ModelProto_NodesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ModelProto_NodesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_model_2eproto_getter, &descriptor_table_model_2eproto_once,
      file_level_metadata_model_2eproto[2]);
}

// ===================================================================

class ModelProto_OptimizationParams::_Internal {
 public:
};

ModelProto_OptimizationParams::ModelProto_OptimizationParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tensorflow.data.model.ModelProto.OptimizationParams)
}
ModelProto_OptimizationParams::ModelProto_OptimizationParams(const ModelProto_OptimizationParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cpu_budget_, &from.cpu_budget_,
    static_cast<size_t>(reinterpret_cast<char*>(&algorithm_) -
    reinterpret_cast<char*>(&cpu_budget_)) + sizeof(algorithm_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.model.ModelProto.OptimizationParams)
}

inline void ModelProto_OptimizationParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cpu_budget_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&algorithm_) -
    reinterpret_cast<char*>(&cpu_budget_)) + sizeof(algorithm_));
}

ModelProto_OptimizationParams::~ModelProto_OptimizationParams() {
  // @@protoc_insertion_point(destructor:tensorflow.data.model.ModelProto.OptimizationParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ModelProto_OptimizationParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ModelProto_OptimizationParams::ArenaDtor(void* object) {
  ModelProto_OptimizationParams* _this = reinterpret_cast< ModelProto_OptimizationParams* >(object);
  (void)_this;
}
void ModelProto_OptimizationParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelProto_OptimizationParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelProto_OptimizationParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.model.ModelProto.OptimizationParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cpu_budget_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&algorithm_) -
      reinterpret_cast<char*>(&cpu_budget_)) + sizeof(algorithm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelProto_OptimizationParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.data.model.AutotuneAlgorithm algorithm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_algorithm(static_cast<::tensorflow::data::model::AutotuneAlgorithm>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 cpu_budget = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          cpu_budget_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ram_budget = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ram_budget_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double model_input_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          model_input_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelProto_OptimizationParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.model.ModelProto.OptimizationParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.data.model.AutotuneAlgorithm algorithm = 1;
  if (this->_internal_algorithm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_algorithm(), target);
  }

  // int64 cpu_budget = 2;
  if (this->_internal_cpu_budget() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_cpu_budget(), target);
  }

  // int64 ram_budget = 3;
  if (this->_internal_ram_budget() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_ram_budget(), target);
  }

  // double model_input_time = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_model_input_time = this->_internal_model_input_time();
  uint64_t raw_model_input_time;
  memcpy(&raw_model_input_time, &tmp_model_input_time, sizeof(tmp_model_input_time));
  if (raw_model_input_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_model_input_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.model.ModelProto.OptimizationParams)
  return target;
}

size_t ModelProto_OptimizationParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.model.ModelProto.OptimizationParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 cpu_budget = 2;
  if (this->_internal_cpu_budget() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_cpu_budget());
  }

  // int64 ram_budget = 3;
  if (this->_internal_ram_budget() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_ram_budget());
  }

  // double model_input_time = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_model_input_time = this->_internal_model_input_time();
  uint64_t raw_model_input_time;
  memcpy(&raw_model_input_time, &tmp_model_input_time, sizeof(tmp_model_input_time));
  if (raw_model_input_time != 0) {
    total_size += 1 + 8;
  }

  // .tensorflow.data.model.AutotuneAlgorithm algorithm = 1;
  if (this->_internal_algorithm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_algorithm());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelProto_OptimizationParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModelProto_OptimizationParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelProto_OptimizationParams::GetClassData() const { return &_class_data_; }

void ModelProto_OptimizationParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModelProto_OptimizationParams *>(to)->MergeFrom(
      static_cast<const ModelProto_OptimizationParams &>(from));
}


void ModelProto_OptimizationParams::MergeFrom(const ModelProto_OptimizationParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.model.ModelProto.OptimizationParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cpu_budget() != 0) {
    _internal_set_cpu_budget(from._internal_cpu_budget());
  }
  if (from._internal_ram_budget() != 0) {
    _internal_set_ram_budget(from._internal_ram_budget());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_model_input_time = from._internal_model_input_time();
  uint64_t raw_model_input_time;
  memcpy(&raw_model_input_time, &tmp_model_input_time, sizeof(tmp_model_input_time));
  if (raw_model_input_time != 0) {
    _internal_set_model_input_time(from._internal_model_input_time());
  }
  if (from._internal_algorithm() != 0) {
    _internal_set_algorithm(from._internal_algorithm());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelProto_OptimizationParams::CopyFrom(const ModelProto_OptimizationParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.model.ModelProto.OptimizationParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelProto_OptimizationParams::IsInitialized() const {
  return true;
}

void ModelProto_OptimizationParams::InternalSwap(ModelProto_OptimizationParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelProto_OptimizationParams, algorithm_)
      + sizeof(ModelProto_OptimizationParams::algorithm_)
      - PROTOBUF_FIELD_OFFSET(ModelProto_OptimizationParams, cpu_budget_)>(
          reinterpret_cast<char*>(&cpu_budget_),
          reinterpret_cast<char*>(&other->cpu_budget_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelProto_OptimizationParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_model_2eproto_getter, &descriptor_table_model_2eproto_once,
      file_level_metadata_model_2eproto[3]);
}

// ===================================================================

class ModelProto::_Internal {
 public:
  static const ::tensorflow::data::model::ModelProto_OptimizationParams& optimization_params(const ModelProto* msg);
};

const ::tensorflow::data::model::ModelProto_OptimizationParams&
ModelProto::_Internal::optimization_params(const ModelProto* msg) {
  return *msg->optimization_params_;
}
ModelProto::ModelProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  nodes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tensorflow.data.model.ModelProto)
}
ModelProto::ModelProto(const ModelProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nodes_.MergeFrom(from.nodes_);
  if (from._internal_has_optimization_params()) {
    optimization_params_ = new ::tensorflow::data::model::ModelProto_OptimizationParams(*from.optimization_params_);
  } else {
    optimization_params_ = nullptr;
  }
  ::memcpy(&output_, &from.output_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_counter_) -
    reinterpret_cast<char*>(&output_)) + sizeof(id_counter_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.model.ModelProto)
}

inline void ModelProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&optimization_params_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_counter_) -
    reinterpret_cast<char*>(&optimization_params_)) + sizeof(id_counter_));
}

ModelProto::~ModelProto() {
  // @@protoc_insertion_point(destructor:tensorflow.data.model.ModelProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ModelProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete optimization_params_;
}

void ModelProto::ArenaDtor(void* object) {
  ModelProto* _this = reinterpret_cast< ModelProto* >(object);
  (void)_this;
  _this->nodes_. ~MapField();
}
inline void ModelProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &ModelProto::ArenaDtor);
  }
}
void ModelProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.model.ModelProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  if (GetArenaForAllocation() == nullptr && optimization_params_ != nullptr) {
    delete optimization_params_;
  }
  optimization_params_ = nullptr;
  ::memset(&output_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_counter_) -
      reinterpret_cast<char*>(&output_)) + sizeof(id_counter_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int64, .tensorflow.data.model.ModelProto.Node> nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&nodes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 output = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 id_counter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          id_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.data.model.ModelProto.OptimizationParams optimization_params = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_optimization_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModelProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.model.ModelProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int64, .tensorflow.data.model.ModelProto.Node> nodes = 1;
  if (!this->_internal_nodes().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::tensorflow::data::model::ModelProto_Node >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< int64_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_nodes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_nodes().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::tensorflow::data::model::ModelProto_Node >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::tensorflow::data::model::ModelProto_Node >::const_iterator
          it = this->_internal_nodes().begin();
          it != this->_internal_nodes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ModelProto_NodesEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::tensorflow::data::model::ModelProto_Node >::const_iterator
          it = this->_internal_nodes().begin();
          it != this->_internal_nodes().end(); ++it) {
        target = ModelProto_NodesEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  // int64 output = 2;
  if (this->_internal_output() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_output(), target);
  }

  // int64 id_counter = 3;
  if (this->_internal_id_counter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_id_counter(), target);
  }

  // .tensorflow.data.model.ModelProto.OptimizationParams optimization_params = 5;
  if (this->_internal_has_optimization_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::optimization_params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.model.ModelProto)
  return target;
}

size_t ModelProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.model.ModelProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int64, .tensorflow.data.model.ModelProto.Node> nodes = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_nodes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::tensorflow::data::model::ModelProto_Node >::const_iterator
      it = this->_internal_nodes().begin();
      it != this->_internal_nodes().end(); ++it) {
    total_size += ModelProto_NodesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .tensorflow.data.model.ModelProto.OptimizationParams optimization_params = 5;
  if (this->_internal_has_optimization_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *optimization_params_);
  }

  // int64 output = 2;
  if (this->_internal_output() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_output());
  }

  // int64 id_counter = 3;
  if (this->_internal_id_counter() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id_counter());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModelProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModelProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModelProto::GetClassData() const { return &_class_data_; }

void ModelProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModelProto *>(to)->MergeFrom(
      static_cast<const ModelProto &>(from));
}


void ModelProto::MergeFrom(const ModelProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.model.ModelProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  if (from._internal_has_optimization_params()) {
    _internal_mutable_optimization_params()->::tensorflow::data::model::ModelProto_OptimizationParams::MergeFrom(from._internal_optimization_params());
  }
  if (from._internal_output() != 0) {
    _internal_set_output(from._internal_output());
  }
  if (from._internal_id_counter() != 0) {
    _internal_set_id_counter(from._internal_id_counter());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModelProto::CopyFrom(const ModelProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.model.ModelProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelProto::IsInitialized() const {
  return true;
}

void ModelProto::InternalSwap(ModelProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  nodes_.InternalSwap(&other->nodes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelProto, id_counter_)
      + sizeof(ModelProto::id_counter_)
      - PROTOBUF_FIELD_OFFSET(ModelProto, optimization_params_)>(
          reinterpret_cast<char*>(&optimization_params_),
          reinterpret_cast<char*>(&other->optimization_params_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_model_2eproto_getter, &descriptor_table_model_2eproto_once,
      file_level_metadata_model_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace data
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::data::model::ModelProto_Node_Parameter* Arena::CreateMaybeMessage< ::tensorflow::data::model::ModelProto_Node_Parameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::data::model::ModelProto_Node_Parameter >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::data::model::ModelProto_Node* Arena::CreateMaybeMessage< ::tensorflow::data::model::ModelProto_Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::data::model::ModelProto_Node >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::data::model::ModelProto_NodesEntry_DoNotUse* Arena::CreateMaybeMessage< ::tensorflow::data::model::ModelProto_NodesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::data::model::ModelProto_NodesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::data::model::ModelProto_OptimizationParams* Arena::CreateMaybeMessage< ::tensorflow::data::model::ModelProto_OptimizationParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::data::model::ModelProto_OptimizationParams >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::data::model::ModelProto* Arena::CreateMaybeMessage< ::tensorflow::data::model::ModelProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::data::model::ModelProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
